/* generated by GenerateAST.js */

class Expr {
  accept (visitor) {}
}

class Assign extends Expr {
  constructor (name, value) {
    super()
    this.name = name
    this.value = value
  }

  accept (visitor) {
    return visitor.visitAssignExpr(this)
  }
}

class Binary extends Expr {
  constructor (left, operator, right) {
    super()
    this.left = left
    this.operator = operator
    this.right = right
  }

  accept (visitor) {
    return visitor.visitBinaryExpr(this)
  }
}

class Call extends Expr {
  constructor (callee, paren, args) {
    super()
    this.callee = callee
    this.paren = paren
    this.args = args
  }

  accept (visitor) {
    return visitor.visitCallExpr(this)
  }
}

class Lambda extends Expr {
  constructor (name, params, body) {
    super()
    this.name = name
    this.params = params
    this.body = body
  }

  accept (visitor) {
    return visitor.visitLambdaExpr(this)
  }
}

class Grouping extends Expr {
  constructor (expression) {
    super()
    this.expression = expression
  }

  accept (visitor) {
    return visitor.visitGroupingExpr(this)
  }
}

class Literal extends Expr {
  constructor (value) {
    super()
    this.value = value
  }

  accept (visitor) {
    return visitor.visitLiteralExpr(this)
  }
}

class Logical extends Expr {
  constructor (left, token, right) {
    super()
    this.left = left
    this.token = token
    this.right = right
  }

  accept (visitor) {
    return visitor.visitLogicalExpr(this)
  }
}

class Unary extends Expr {
  constructor (operator, right) {
    super()
    this.operator = operator
    this.right = right
  }

  accept (visitor) {
    return visitor.visitUnaryExpr(this)
  }
}

class Ternary extends Expr {
  constructor (condition, left, right) {
    super()
    this.condition = condition
    this.left = left
    this.right = right
  }

  accept (visitor) {
    return visitor.visitTernaryExpr(this)
  }
}

class Variable extends Expr {
  constructor (name) {
    super()
    this.name = name
  }

  accept (visitor) {
    return visitor.visitVariableExpr(this)
  }
}

export {
  Assign,
  Binary,
  Call,
  Lambda,
  Grouping,
  Literal,
  Logical,
  Unary,
  Ternary,
  Variable
}
